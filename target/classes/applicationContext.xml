<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- dao层配置 start -->

    <!-- 配置连接池 -->
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 这里我们用阿里提供的连接池 -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 配置SqlSessionFactory，生产SqlSession对象的工厂 -->
    <!-- 由于SqlSessionFactory是一个接口，不能实例化，所以要用SqlSessionFactoryBean来创建 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="druidDataSource"/>
        <!-- 扫描domain包的属性，给包下所有的pojo对象起别名 -->
        <!--        <property name="typeAliasesPackage" value="top.ityf.domain"/>-->
    </bean>
    <!-- 扫描dao接口包的路径，以便生成包下所有接口的代理对象，并放入IOC容器 -->
    <!-- 由于这里不存在调用，所以省去id -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="top.ityf.dao"/>
    </bean>

    <!-- dao层配置 end -->


    <!-- service层配置 start -->

    <!-- 组件扫描配置 -->
    <context:component-scan base-package="top.ityf.service"/>
    <!-- aop面向切面编程，切面就算切入点和通知的组合 -->
    <!-- 通知就是增强类 -->
    <!-- 配置事务管理器，事务管理器也是增强类，只不过这个增强类是框架提供的 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"></property>
    </bean>
    <!-- 配置事务的通知，这个通知是本项目独有的通知 -->
    <tx:advice id="advice">
        <tx:attributes>
            <!-- 传播行为 -->
            <!-- 只要是增删改的方法都要走事务，因为涉及到提交回滚等等
                所以save、insert、delete、update开头的方法需要设置propagetion属性（表示一定会有事务，默认值为REQUIRED）
                find、get、select开头的方法，需要设置propagetion属性，值为SUPPORTS，并要打开read-only属性
             -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置切面 -->
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* top.ityf.service.impl.*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="advice" pointcut-ref="pointcut"></aop:advisor>
    </aop:config>

    <!-- service层配置 end -->
</beans>